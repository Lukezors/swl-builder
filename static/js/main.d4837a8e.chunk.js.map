{"version":3,"sources":["components/UpgradeButton.js","util/constants.js","data/data.js","util/jsonUtils.js","components/UnitCard.js","components/ArmyList.jsx","components/CollapsableHeader.js","components/SelectionCard.js","components/SelectionPane.jsx","components/UsageBarItem.js","components/UsageBar.js","components/ArmyBuildPane.jsx","App.js","serviceWorker.js","index.js"],"names":["UpgradeButton","type","upgrades","upgradeFunction","unitKey","upgradeKey","useState","anchorEl","setAnchorEl","undefined","selectedUpgrade","setSelectedUpgrade","handleClose","upgrade","Button","variant","onClick","event","currentTarget","name","Menu","id","keepMounted","open","Boolean","onClose","length","map","MenuItem","RANKS","FACTIONS","UPGRADE_TYPES","UNIT_TYPES","data","units","Commander","point_cost","rank","faction","upgrades_slots","restricted_upgrades","calculateUsage","unitList","currentUnit","usage","points","slots","Object","keys","forEach","key","selected_upgrades","upKey","Body","styled","div","UpgradeBar","RemoveButton","UnitCard","unit","deleteFunction","index","updateFunction","IconButton","upgradeType","ArmyList","factionUnits","removeFunction","Title","CollapsableHeader","title","children","setOpen","AddButton","SelectionCard","addFunction","e","stopPropagation","Category","addFunc","subitem","SelectionPane","item","UsageBarItemBody","UsageBarItem","maxValue","iconUrl","currentValue","defaultProps","UsageBarBody","UsageBar","PropTypes","shape","Container","ArmyBuildPane","factionName","setUnitList","listIndex","setListIndex","unitListCpy","remaining","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4837a8e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\n\nconst UpgradeButton = ({\n  type,\n  upgrades,\n  upgradeFunction,\n  unitKey,\n  upgradeKey\n}) => {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedUpgrade, setSelectedUpgrade] = useState(undefined);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = upgrade => {\n    setSelectedUpgrade(upgrade);\n    upgradeFunction(unitKey, upgradeKey, upgrade);\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Button variant=\"contained\" onClick={handleClick}>\n        {selectedUpgrade ? selectedUpgrade.name : type}\n      </Button>\n      <Menu\n        id=\"upgrade-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={() => handleClose(selectedUpgrade)}\n      >\n        {upgrades &&\n          upgrades.length > 0 &&\n          upgrades.map(upgrade => (\n            <MenuItem onClick={() => handleClose(upgrade)}>\n              {upgrade.name}\n            </MenuItem>\n          ))}\n        {selectedUpgrade && (\n          <MenuItem onClick={() => handleClose(undefined)}>Remove</MenuItem>\n        )}\n      </Menu>\n    </>\n  );\n};\n\nUpgradeButton.propTypes = {\n  type: PropTypes.string,\n  upgrades: PropTypes.array,\n  upgradeFunction: PropTypes.func,\n  unitKey: PropTypes.number,\n  upgradeKey: PropTypes.number\n};\n\nexport default UpgradeButton;\n","export const RANKS = {\n  COMMANDER: \"Commander\",\n  OPERATIVE: \"Operative\",\n  CORPS: \"Corps\",\n  SPECIAL_FORCES: \"Special Forces\",\n  SUPPORT: \"Support\",\n  HEAVY: \"Heavy\"\n};\n\nexport const FACTIONS = {\n  REBEL: \"Rebel\",\n  IMPERIAL: \"Imperial\",\n  REPUBLIC: \"Republic\",\n  SEPARATIST: \"Separatist\"\n};\n\nexport const UPGRADE_TYPES = {\n  HEAVY_WEAPON: \"Heavy Weapon\",\n  PERSONNEL: \"Personnel\",\n  FORCE: \"Force\",\n  COMMAND: \"Command\",\n  HARDPOINT: \"Hardpoint\",\n  GEAR: \"Gear\",\n  GRENADES: \"Grenades\",\n  COMMS: \"Comms\",\n  PILOT: \"Pilot\",\n  TRAINING: \"Training\",\n  GENERATOR: \"Generator\",\n  ARMAMENT: \"Armament\",\n  CREW: \"Crew\"\n};\n\nexport const UNIT_TYPES = {\n  TROOPER: \"Trooper\",\n  EMPLACEMENT_TROOPER: \"Emplacement Trooper\",\n  CREATURE_TROOPER: \"Creature Trooper\",\n  DROID_TROOPER: \"Droid Trooper\",\n  GROUND_VEHICLE: \"Ground Vehicle\",\n  REPULSOR_VEHICLE: \"Repulsor Vehicle\"\n};\n","import { RANKS, UPGRADE_TYPES, FACTIONS, UNIT_TYPES } from \"../util/constants\";\n\nexport const data = {\n  units: {\n    [FACTIONS.REBEL]: {\n      Commander: [\n        {\n          name: \"Luke Skywalker\",\n          point_cost: 160,\n          rank: RANKS.COMMANDER,\n          faction: FACTIONS.REBEL,\n          type: UNIT_TYPES.TROOPER,\n          upgrades_slots: [\n            UPGRADE_TYPES.FORCE,\n            UPGRADE_TYPES.FORCE,\n            UPGRADE_TYPES.GEAR\n          ]\n        },\n        {\n          name: \"Leia Organa\",\n          point_cost: 90,\n          rank: RANKS.COMMANDER,\n          faction: FACTIONS.REBEL,\n          type: UNIT_TYPES.TROOPER,\n          upgrades_slots: [\n            UPGRADE_TYPES.COMMAND,\n            UPGRADE_TYPES.COMMAND,\n            UPGRADE_TYPES.GEAR\n          ]\n        }\n      ],\n      [RANKS.OPERATIVE]: [\n        {\n          name: \"Chewbacca\",\n          point_cost: 95,\n          rank: RANKS.OPERATIVE,\n          faction: FACTIONS.REBEL,\n          type: UNIT_TYPES.TROOPER,\n          upgrades_slots: [\n            UPGRADE_TYPES.TRAINING,\n            UPGRADE_TYPES.TRAINING,\n            UPGRADE_TYPES.GEAR\n          ]\n        }\n      ],\n      [RANKS.CORPS]: [\n        {\n          name: \"Rebel Troopers\",\n          point_cost: 40,\n          rank: RANKS.CORPS,\n          faction: FACTIONS.REBEL,\n          type: UNIT_TYPES.TROOPER,\n          upgrades_slots: [\n            UPGRADE_TYPES.HEAVY_WEAPON,\n            UPGRADE_TYPES.PERSONNEL,\n            UPGRADE_TYPES.GEAR,\n            UPGRADE_TYPES.GRENADES\n          ],\n          restricted_upgrades: []\n        }\n      ],\n      [RANKS.SPECIAL_FORCES]: [\n        {\n          name: \"Wookie Warriors\",\n          point_cost: 75,\n          rank: RANKS.SPECIAL_FORCES,\n          faction: FACTIONS.REBEL,\n          type: UNIT_TYPES.TROOPER,\n          upgrades_slots: [\n            UPGRADE_TYPES.HEAVY_WEAPON,\n            UPGRADE_TYPES.TRAINING,\n            UPGRADE_TYPES.TRAINING,\n            UPGRADE_TYPES.GEAR,\n            UPGRADE_TYPES.GRENADES\n          ],\n          restricted_upgrades: []\n        }\n      ],\n      [RANKS.SUPPORT]: [\n        {\n          name: \"AT-RT\",\n          point_cost: 55,\n          rank: RANKS.SUPPORT,\n          faction: FACTIONS.REBEL,\n          type: UNIT_TYPES.GROUND_VEHICLE,\n          upgrades_slots: [UPGRADE_TYPES.HARDPOINT, UPGRADE_TYPES.COMMS],\n          restricted_upgrades: []\n        }\n      ],\n      [RANKS.HEAVY]: [\n        {\n          name: \"AirSpeeder\",\n          point_cost: 140,\n          rank: RANKS.HEAVY,\n          faction: FACTIONS.REBEL,\n          type: UNIT_TYPES.REPULSOR_VEHICLE,\n          upgrades_slots: [\n            UPGRADE_TYPES.PILOT,\n            UPGRADE_TYPES.HARDPOINT,\n            UPGRADE_TYPES.COMMS\n          ],\n          restricted_upgrades: []\n        }\n      ]\n    }\n  },\n  upgrades: {\n    [UPGRADE_TYPES.GEAR]: [\n      {\n        name: \"Recon Intel\",\n        point_cost: 2\n      },\n      {\n        name: \"Targeting Scopes\",\n        point_cost: 4\n      },\n      {\n        name: \"Grappling Hooks\",\n        point_cost: 3\n      }\n    ]\n  }\n};\n","import { data } from \"../data/data\";\nimport { RANKS } from \"./constants\";\n\nexport const sum = (i, x) => i + x;\n\nexport const getFaction = factionName => data.units[factionName];\n\nexport const getUpgrades = upgradeType => data.upgrades[upgradeType];\n\nexport const calculateUsage = unitList => {\n  let usage = {\n    points: 0,\n    slots: {\n      [RANKS.COMMANDER]: 0,\n      [RANKS.OPERATIVE]: 0,\n      [RANKS.CORPS]: 0,\n      [RANKS.SPECIAL_FORCES]: 0,\n      [RANKS.SUPPORT]: 0,\n      [RANKS.HEAVY]: 0\n    }\n  };\n\n  let currentUnit;\n  Object.keys(unitList).forEach(key => {\n    currentUnit = unitList[key];\n    if (currentUnit.selected_upgrades) {\n      Object.keys(currentUnit.selected_upgrades).forEach(upKey => {\n        if (currentUnit.selected_upgrades[upKey]) {\n          usage.points += currentUnit.selected_upgrades[upKey].point_cost;\n        }\n      });\n    }\n    usage.points += currentUnit.point_cost;\n    usage.slots[currentUnit.rank]++;\n  });\n\n  return usage;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport UpgradeButton from \"./UpgradeButton\";\n\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { getUpgrades } from \"../util/jsonUtils\";\n\nconst Body = styled.div`\n  border-style: solid;\n  border-width: 1px;\n`;\n\nconst UpgradeBar = styled.div`\n  display: flex;\n`;\n\nconst RemoveButton = styled.div`\n  float: right;\n`;\n\nconst UnitCard = ({ unit, deleteFunction, index, updateFunction }) => {\n  const { name, upgrades_slots } = unit;\n  return (\n    <Body>\n      <p>\n        {name}\n        <RemoveButton>\n          <IconButton\n            onClick={() => {\n              deleteFunction(index);\n            }}\n          >\n            <ClearIcon />\n          </IconButton>\n        </RemoveButton>\n      </p>\n      <UpgradeBar>\n        {upgrades_slots.map((name, key) => (\n          <UpgradeButton\n            unitKey={index}\n            upgradeKey={key}\n            upgradeFunction={updateFunction}\n            type={name}\n            upgrades={getUpgrades(name)}\n          />\n        ))}\n      </UpgradeBar>\n    </Body>\n  );\n};\n\nUnitCard.propTypes = {\n  unit: PropTypes.object.isRequired,\n  deleteFunction: PropTypes.func.isRequired,\n  updateFunction: PropTypes.func,\n  index: PropTypes.string\n};\n\nexport default UnitCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport UnitCard from \"./UnitCard\";\n\nconst Body = styled.div`\n  border-style: solid;\n  border-width: 1px;\n  flex-grow: 3;\n`;\n\nconst ArmyList = ({factionUnits, removeFunction, updateFunction}) => <Body>\n    {Object.keys(factionUnits).map(key => (\n        <UnitCard updateFunction={updateFunction} unit={factionUnits[key]} key={key} deleteFunction={removeFunction} index={key}/>\n    ))}\n\n</Body>;\n\n\nArmyList.propTypes = {\n    factionUnits: PropTypes.object,\n    removeFunction: PropTypes.func,\n    updateFunction: PropTypes.func\n};\n\nexport default ArmyList;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Body = styled.div``;\n\nconst Title = styled.div`\n  border-bottom: 1px solid;\n`;\n\nconst CollapsableHeader = ({ title, children }) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <Body onClick={() => setOpen(!open)}>\n      <Title>\n        {title} {open ? <>&#9650;</> : <>&#9660;</>}\n      </Title>\n      {open && <>{children}</>}\n    </Body>\n  );\n};\n\nCollapsableHeader.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element),\n  title: PropTypes.string.isRequired\n};\n\nexport default CollapsableHeader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nconst Body = styled.div`\n  border-style: solid;\n  border-width: 1px;\n`;\n\nconst AddButton = styled.div`\n  float: right;\n`;\n\nconst SelectionCard = ({ unit, addFunction }) => {\n  const { name, point_cost } = unit;\n  return (\n    <Body>\n      <p>\n        {name}\n        <AddButton>\n          <IconButton\n            onClick={e => {\n              e.stopPropagation();\n              addFunction(unit);\n            }}\n          >\n            <AddIcon />\n          </IconButton>\n        </AddButton>\n      </p>\n      <p>{point_cost}</p>\n    </Body>\n  );\n};\n\nSelectionCard.propTypes = {\n  unit: PropTypes.object.isRequired,\n  addFunction: PropTypes.func\n};\n\nexport default SelectionCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nimport CollapsableHeader from \"./CollapsableHeader\";\nimport SelectionCard from \"./SelectionCard\";\n\nconst Body = styled.div`\n  border-style: solid;\n  border-width: 1px;\n  flex-grow: 1;\n  border-right: 0;\n`;\n\nconst Category = ({ title, units, addFunc }) => (\n  <CollapsableHeader key={title} title={title}>\n    {units.map(subitem => (\n      <SelectionCard unit={subitem} key={subitem.name} addFunction={addFunc}/>\n    ))}\n  </CollapsableHeader>\n);\n\nconst SelectionPane = ({factionUnits, addFunction}) => {\n  return (\n    <Body>\n      {Object.keys(factionUnits).map(item => (\n        <Category title={item} key={item} units={factionUnits[item]} addFunc={addFunction} />\n      ))}\n    </Body>\n  );\n};\n\nSelectionPane.propTypes = {\n  factionUnits: PropTypes.object,\n  addFunction: PropTypes.func\n};\n\nexport default SelectionPane;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst UsageBarItemBody = styled.div`\n`;\n\nconst UsageBarItem = ({ name, iconUrl, maxValue, currentValue }) => (\n  <UsageBarItemBody>\n    {name}: {currentValue} / {maxValue}\n  </UsageBarItemBody>\n);\n\nUsageBarItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  iconUrl: PropTypes.string,\n  maxValue: PropTypes.number.isRequired,\n  currentValue: PropTypes.number.isRequired\n};\n\nUsageBarItem.defaultProps = {\n  maxValue: 0,\n  currentValue: 2\n};\n\nexport default UsageBarItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport UsageBarItem from \"./UsageBarItem\";\nimport { RANKS } from \"../util/constants\";\n\nconst UsageBarBody = styled.div`\n  grid-column: 1 / span 2;\n  border-style: solid;\n  border-width: 1px;\n  border-bottom: 0;\n  display: flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nconst UsageBar = ({usage}) => {\n    const { points, slots } = usage;\n    return (\n        <UsageBarBody>\n            <UsageBarItem name={\"Points\"} currentValue={points} maxValue={800} />\n            {/*TODO: Points may need diff styling/ comp*/}\n            <UsageBarItem\n                name={RANKS.COMMANDER}\n                currentValue={slots[RANKS.COMMANDER]}\n                maxValue={2}\n            />\n            <UsageBarItem\n                name={RANKS.OPERATIVE}\n                currentValue={slots[RANKS.OPERATIVE]}\n                maxValue={2}\n            />\n            <UsageBarItem\n                name={RANKS.SPECIAL_FORCES}\n                currentValue={slots[RANKS.SPECIAL_FORCES]}\n                maxValue={3}\n            />\n            <UsageBarItem\n                name={RANKS.CORPS}\n                currentValue={slots[RANKS.CORPS]}\n                maxValue={6}\n            />\n            <UsageBarItem\n                name={RANKS.SUPPORT}\n                currentValue={slots[RANKS.SUPPORT]}\n                maxValue={3}\n            />\n            <UsageBarItem\n                name={RANKS.HEAVY}\n                currentValue={slots[RANKS.HEAVY]}\n                maxValue={2}\n            />\n        </UsageBarBody>\n    );\n};\n\nUsageBar.propTypes = {\n  usage: PropTypes.shape({\n    points: PropTypes.number.isRequired,\n    slots: PropTypes.shape({\n      [RANKS.COMMANDER]: PropTypes.number.isRequired,\n      [RANKS.OPERATIVE]: PropTypes.number.isRequired,\n      [RANKS.SPECIAL_FORCES]: PropTypes.number.isRequired,\n      [RANKS.CORPS]: PropTypes.number.isRequired,\n      [RANKS.SUPPORT]: PropTypes.number.isRequired,\n      [RANKS.HEAVY]: PropTypes.number.isRequired\n    })\n  })\n};\n\nUsageBar.defaultProps = {\n    usage: PropTypes.shape({\n        points: 0,\n        slots: {\n            [RANKS.COMMANDER]: 0,\n            [RANKS.OPERATIVE]: 0,\n            [RANKS.SPECIAL_FORCES]: 0,\n            [RANKS.CORPS]: 0,\n            [RANKS.SUPPORT]: 0,\n            [RANKS.HEAVY]: 0\n        }\n    })\n};\n\nexport default UsageBar;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport ArmyList from \"./ArmyList\";\nimport SelectionPane from \"./SelectionPane\";\nimport UsageBar from \"./UsageBar\";\n\nimport { getFaction, calculateUsage } from \"../util/jsonUtils\";\nimport { FACTIONS } from \"../util/constants\";\n\nconst Container = styled.div`\n    display: grid;\n    grid-template-columns: 33% 66%\n    grid-template-rows: 10% 90%;\n    height: 70vh;\n    margin: 30px\n`;\n\nconst ArmyBuildPane = () => {\n\n  const [unitList, setUnitList] = useState({});\n  const [listIndex, setListIndex] = useState(1);\n\n  const addUnit = unit => {\n    unit.selected_upgrades = {};\n    setUnitList({\n      ...unitList,\n      [listIndex]: unit\n    });\n    setListIndex(listIndex + 1);\n  };\n\n  const removeUnit = index => {\n    const { [index]: removedValue, ...remaining } = unitList;\n    setUnitList(remaining);\n  };\n\n  const addUpgrade = (unitKey, upgradeKey, upgrade) => {\n      let unitListCpy = {...unitList};\n      unitListCpy[unitKey].selected_upgrades[upgradeKey] = upgrade;\n      setUnitList(unitListCpy);\n  };\n\n  return (\n    <Container>\n      <UsageBar usage={calculateUsage(unitList)} />\n      <SelectionPane\n        addFunction={addUnit}\n        factionUnits={getFaction(FACTIONS.REBEL)}\n      />\n      <ArmyList\n        updateFunction={addUpgrade}\n        removeFunction={removeUnit}\n        factionUnits={unitList}\n      />\n    </Container>\n  );\n};\n\nexport default ArmyBuildPane;\n","import React from \"react\";\n\nimport ArmyBuildPane from \"./components/ArmyBuildPane\";\n\nconst App = () => <ArmyBuildPane />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}