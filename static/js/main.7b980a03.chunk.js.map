{"version":3,"sources":["logo.svg","components/ArmyList.jsx","components/CollapsableHeader.js","components/SelectionCard.js","components/SelectionPane.jsx","util/jsonUtils.js","components/ArmyBuildPane.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Body","styled","div","ArmyList","props","CollapsableHeaderBody","CollapsableHeaderTitle","CollapsableHeader","useState","open","setOpen","onClick","title","children","defaultProps","SelectionCardBody","SelectionCard","unit","name","cost","SelectionPane","factionName","curData","data","units","Object","keys","map","item","index","key","subitem","i","console","log","Container","ArmyBuildPane","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2xCAAAA,EAAOC,QAAU,IAA0B,kC,6QCK3C,IAAMC,EAAOC,IAAOC,IAAV,KAaKC,EANE,SAACC,GACd,OACI,kBAACJ,EAAD,O,wMCTR,IAAMK,EAAwBJ,IAAOC,IAAV,KAGrBI,EAAyBL,IAAOC,IAAV,KAMtBK,EAAoB,SAACH,GAAW,IAAD,EAETI,oBAAS,GAFA,mBAE1BC,EAF0B,KAEpBC,EAFoB,KAGjC,OACI,kBAACL,EAAD,CAAuBM,QAAS,kBAAID,GAASD,KACrC,kBAACH,EAAD,KACCF,EAAMQ,OAEVH,EACG,6BACCL,EAAMS,UAEH,OASpBN,EAAkBO,aAAe,GAIlBP,Q,yHClCf,IAAMQ,EAAoBd,IAAOC,IAAV,KAMjBc,EAAgB,SAACZ,GAAW,IAAD,EACRA,EAAMa,KAApBC,EADsB,EACtBA,KAAMC,EADgB,EAChBA,KACb,OACI,kBAACJ,EAAD,KACI,2BAAIG,GACJ,2BAAIC,KAShBH,EAAcF,aAAe,GAIdE,Q,yKCpBf,IAAMhB,EAAOC,IAAOC,IAAV,KAiCKkB,EAzBO,SAAChB,GACnB,ICZuBiB,EDYjBC,GCZiBD,EDYI,QCXpBE,EAAKC,MAAMH,IDYlB,OACI,kBAAC,EAAD,KACKI,OAAOC,KAAKJ,GAASK,KAAI,SAACC,EAAMC,GACjC,OACA,kBAAC,EAAD,CAAmBC,IAAKF,EAAMhB,MAAOgB,GAEjCN,EAAQM,GAAMD,KAAI,SAACI,EAASC,GAExB,OADAC,QAAQC,IAAIH,GAER,kBAAC,EAAD,CACId,KAAMc,EACND,IAAKC,EAAQb,gB,gIEvBzC,IAAMiB,EAAYlC,IAAOC,IAAV,KAeAkC,EATO,SAAChC,GACnB,OACI,kBAAC+B,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCNGE,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7b980a03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","\n\nimport React from 'react';\nimport styled from 'styled-components'\n\nconst Body = styled.div`\n    border-style: solid;\n    border-width: 1px;\n    flex-grow: 3\n`;\n\n\nconst ArmyList = (props) => {\n    return (\n        <Body></Body>\n    )\n};\n\nexport default ArmyList;","import React,{ useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'\n\n\nconst CollapsableHeaderBody = styled.div`\n`;\n\nconst CollapsableHeaderTitle = styled.div`\n    border-style: solid;\n    border-width: 1px;\n`;\n\n\nconst CollapsableHeader = (props) => {\n\n    const [open, setOpen] = useState(false);\n    return (\n        <CollapsableHeaderBody onClick={()=>setOpen(!open)}>\n                <CollapsableHeaderTitle>\n                {props.title}\n                </CollapsableHeaderTitle>\n            {open ? (\n                <div >\n                {props.children}\n                </div>\n                ) : null}\n        </CollapsableHeaderBody>\n    )\n};\n\nCollapsableHeader.propTypes = {\n    // types here\n};\n\nCollapsableHeader.defaultProps = {\n    // defaults here\n};\n\nexport default CollapsableHeader;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components'\n\n\nconst SelectionCardBody = styled.div`\n    border-style: solid;\n    border-width: 1px;\n`;\n\n\nconst SelectionCard = (props) => {\n    const {name, cost} = props.unit;\n    return (\n        <SelectionCardBody>\n            <p>{name}</p>\n            <p>{cost}</p>\n        </SelectionCardBody>\n    )\n};\n\nSelectionCard.propTypes = {\n    // types here\n};\n\nSelectionCard.defaultProps = {\n    // defaults here\n};\n\nexport default SelectionCard;","import React from 'react';\nimport styled from 'styled-components'\n\nimport CollapsableHeader from './CollapsableHeader'\nimport SelectionCard from './SelectionCard'\n\nimport {getFaction} from 'util/jsonUtils'\n\n\nconst Body = styled.div`\n    border-style: solid;\n    border-width: 1px;\n    flex-grow: 1;\n    border-right: 0\n`;\n\n\nconst SelectionPane = (props) => {\n    const curData = getFaction('rebel');\n    return (\n        <Body>\n            {Object.keys(curData).map((item, index) => {\n            return (\n            <CollapsableHeader key={item} title={item}>\n            {\n                curData[item].map((subitem, i) => {\n                    console.log(subitem);\n                    return (\n                        <SelectionCard\n                            unit={subitem}\n                            key={subitem.name}\n                        />\n                    )\n                })\n            }\n            </CollapsableHeader>\n            )\n        })}\n        </Body>\n    )\n};\n\nexport default SelectionPane;","import data from 'data/unitOptions'\n\nexport const sum = (i, x) => {\n    return i + x;\n};\n\nexport const getFaction = (factionName) => {\n    return data.units[factionName];\n};","\nimport React from 'react';\nimport styled from 'styled-components'\n\nimport ArmyList from'./ArmyList';\nimport SelectionPane from './SelectionPane'\n\nconst Container = styled.div`\n    display: flex;\n    height: 70vh;\n    margin: 30px\n`;\n\nconst ArmyBuildPane = (props) => {\n    return (\n        <Container>\n            <SelectionPane/>\n            <ArmyList/>\n        </Container>\n    );\n};\n\nexport default ArmyBuildPane;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ArmyBuildPane from './components/ArmyBuildPane'\n\nfunction App() {\n  return (\n    <ArmyBuildPane/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}