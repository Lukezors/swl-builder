{"version":3,"sources":["components/ArmyList.jsx","components/CollapsableHeader.js","components/SelectionCard.js","components/SelectionPane.jsx","util/jsonUtils.js","components/ArmyBuildPane.jsx","App.js","serviceWorker.js","index.js"],"names":["Body","styled","div","ArmyList","Title","CollapsableHeader","title","children","useState","open","setOpen","onClick","SelectionCard","unit","name","cost","Category","units","key","map","subitem","SelectionPane","factionName","curData","data","Object","keys","item","Container","ArmyBuildPane","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"++CAGA,IAAMA,EAAOC,IAAOC,IAAV,KAQKC,EAFE,kBAAM,kBAACH,EAAD,O,iLCLvB,IAAMA,EAAOC,IAAOC,IAAV,KAEJE,EAAQH,IAAOC,IAAV,KAoBIG,EAhBW,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EACzBC,oBAAS,GADgB,mBAC1CC,EAD0C,KACpCC,EADoC,KAEjD,OACE,kBAAC,EAAD,CAAMC,QAAS,kBAAMD,GAASD,KAC5B,kBAACL,EAAD,KAAQE,GAEPG,GAAQ,oCAAGF,K,qHCZlB,IAAMP,EAAOC,IAAOC,IAAV,KAmBKU,EAdO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACfC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACd,OACE,kBAAC,EAAD,KACE,2BAAID,GACJ,2BAAIC,K,kKCNV,IAAMf,EAAOC,IAAOC,IAAV,KAOJc,EAAW,SAAC,GAAD,IAAGV,EAAH,EAAGA,MAAOW,EAAV,EAAUA,MAAV,OACf,kBAAC,EAAD,CAAmBC,IAAKZ,EAAOA,MAAOA,GACnCW,EAAME,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,CAAeP,KAAMO,EAASF,IAAKE,EAAQN,YAetDO,EAXO,WACpB,IClBwBC,EDkBlBC,GClBkBD,EDkBG,QClBYE,EAAKP,MAAMK,IDmBlD,OACE,kBAAC,EAAD,KACGG,OAAOC,KAAKH,GAASJ,KAAI,SAAAQ,GAAI,OAC5B,kBAAC,EAAD,CAAUrB,MAAOqB,EAAMT,IAAKS,EAAMV,MAAOM,EAAQI,U,gIEnBzD,IAAMC,EAAY3B,IAAOC,IAAV,KAaA2B,EAPO,kBAClB,kBAACD,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCVOE,EAFH,kBAAM,kBAAC,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.44e24539.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Body = styled.div`\n  border-style: solid;\n  border-width: 1px;\n  flex-grow: 3;\n`;\n\nconst ArmyList = () => <Body />;\n\nexport default ArmyList;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Body = styled.div``;\n\nconst Title = styled.div`\n  border-bottom: 1px solid;\n`;\n\nconst CollapsableHeader = ({ title, children }) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <Body onClick={() => setOpen(!open)}>\n      <Title>{title}</Title>\n\n      {open && <>{children}</>}\n    </Body>\n  );\n};\n\nCollapsableHeader.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.element),\n  title: PropTypes.string.isRequired\n};\n\nexport default CollapsableHeader;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Body = styled.div`\n  border-style: solid;\n  border-width: 1px;\n`;\n\nconst SelectionCard = ({ unit }) => {\n  const { name, cost } = unit; //todo temporary will need to expand deez props more when the comp grows into something usable\n  return (\n    <Body>\n      <p>{name}</p>\n      <p>{cost}</p>\n    </Body>\n  );\n};\n\nSelectionCard.propTypes = {\n  unit: PropTypes.object.isRequired\n};\n\nexport default SelectionCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport CollapsableHeader from \"./CollapsableHeader\";\nimport SelectionCard from \"./SelectionCard\";\n\nimport { getFaction } from \"util/jsonUtils\";\n\nconst Body = styled.div`\n  border-style: solid;\n  border-width: 1px;\n  flex-grow: 1;\n  border-right: 0;\n`;\n\nconst Category = ({ title, units }) => (\n  <CollapsableHeader key={title} title={title}>\n    {units.map(subitem => <SelectionCard unit={subitem} key={subitem.name} /> )}\n  </CollapsableHeader>\n);\n\nconst SelectionPane = () => {\n  const curData = getFaction(\"rebel\");\n  return (\n    <Body>\n      {Object.keys(curData).map(item => (\n        <Category title={item} key={item} units={curData[item]} />\n      ))}\n    </Body>\n  );\n};\n\nexport default SelectionPane;\n","import data from \"data/unitOptions\";\n\nexport const sum = (i, x) => i + x;\n\nexport const getFaction = factionName => data.units[factionName];\n","\nimport React from 'react';\nimport styled from 'styled-components'\n\nimport ArmyList from'./ArmyList';\nimport SelectionPane from './SelectionPane'\n\nconst Container = styled.div`\n    display: flex;\n    height: 70vh;\n    margin: 30px\n`;\n\nconst ArmyBuildPane = () => (\n    <Container>\n        <SelectionPane />\n        <ArmyList />\n    </Container>\n);\n\nexport default ArmyBuildPane;\n","import React from \"react\";\n\nimport ArmyBuildPane from \"./components/ArmyBuildPane\";\n\nconst App = () => <ArmyBuildPane />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}